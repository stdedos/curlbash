#!/bin/sh
#######################################################################
# Copyright (c) 2016 Scott Vokes <vokes.s@gmail.com>
# Copyright (c) 2024 Stavros Ntentos <133706+stdedos@users.noreply.github.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#######################################################################
# Curl a URL and review / verify checksum of its contents.
#######################################################################

CURLBASH_VERSION="0.2.0"

# Defaults
VERBOSE=0
EXPECTED_SHA256=0
USE_CACHE=1
TMP_STORE_DIR="${TMP_STORE_DIR:-${TMPDIR:-/tmp}/$(basename "$0")}"

mkdir -p "${TMP_STORE_DIR}"
# shellcheck disable=SC2064 # Intentional immediate expansion
trap "rmdir '${TMP_STORE_DIR}' 2>/dev/null" EXIT INT TERM HUP QUIT ABRT

usage() {
    >&2 echo "curlbash version ${CURLBASH_VERSION} by Stavros Ntentos"
    >&2 echo
    >&2 echo "Usage: curlbash [-c] [-e SHA256] [-h] [-v] URL"
    >&2 echo "  -c           ignore cache"
    >&2 echo "  -e SHA256    expect this SHA256, or exit"
    >&2 echo "  -h           print this help and exit"
    >&2 echo "  -v           increase verbosity"
}

debug() {
    if [ "${VERBOSE}" -gt 0 ]; then
        echo "### $1"
    fi
}

die() {
  # Complain to STDERR and exit with error.
  >&2 echo "$*"
  exit 2;
}

needs_arg() {
  if [ -z "{$OPTARG}" ]; then
    die "No argument provided for the -${OPT} option"
  fi
}

parse_args() {
    while getopts ce:fhv OPT; do
      case "$OPT" in
        c) USE_CACHE=0;;
        e) needs_arg; EXPECTED_SHA256="$OPTARG" ;;
        h) usage; exit 0;;
        v) VERBOSE=1;;
        \? ) exit 2 ;;                     # bad short option (error reported via getopts)
        * ) die "Illegal option --$OPT" ;; # bad long option
      esac
    done
    shift $((OPTIND-1))

    URL="$1"
}

exists_in_path() {
    command -V "$1" >/dev/null 2>/dev/null
}

# Try to find program to SHA256
if exists_in_path "sha256"; then
    SHA256="sha256"
elif exists_in_path "sha256sum"; then
    SHA256="sha256sum"
else
    echo "Error: Could not find sha256/sha256sum for SHA256 checksums on PATH!" >&2
    exit 1
fi

parse_args "$@"

if [ -z "${URL}" ]; then
    usage
    exit 1
fi

HASH="$(echo "${URL}" | "${SHA256}" | awk '{print($1)}')"
CACHE_FILE="${TMP_STORE_DIR}/${HASH}"

if [ -s "${CACHE_FILE}" ] && [ "${USE_CACHE}" = 1 ]; then
    debug "Using existing cache at ${CACHE_FILE}"
else
    echo "Saving ${URL} to ${CACHE_FILE}"
    curl --fail --silent --show-error --location "${URL}" > "${CACHE_FILE}" || exit $?
    chmod u+x "${CACHE_FILE}"
fi

SHA256_OUTPUT=$("${SHA256}" "$CACHE_FILE")
echo "${SHA256_OUTPUT}"
if [ "${EXPECTED_SHA256}" != 0 ]; then
    CHECKSUM="$(echo "${SHA256_OUTPUT}" | awk '{print($1)}')"
    printf "Comparing checksums, expecting %s" "${EXPECTED_SHA256}"
    if [ "${EXPECTED_SHA256}" != "${CHECKSUM}" ]; then
        echo
        echo "### WARNING: Checksum mismatch!"
        echo "### EXP: ${EXPECTED_SHA256}"
        echo "### GOT: ${CHECKSUM}"
        exit 1
    else
        echo ": OK"
    fi
fi
